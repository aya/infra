version: '3.6'

services:
  consul:
    image: consul:latest
    environment:
      CONSUL_BIND_INTERFACE: '${DOCKER_HOST_IFACE}'
      CONSUL_CLIENT_INTERFACE: '${DOCKER_HOST_IFACE}'
      CONSUL_LOCAL_CONFIG: '{"log_level": "warn"}'
    hostname: ${HOSTNAME}
    labels:
    - SERVICE_8300_IGNORE=true
    - SERVICE_8301_IGNORE=true
    - SERVICE_8302_IGNORE=true
    - SERVICE_8500_NAME=${COMPOSE_SERVICE_NAME}-consul-8500
    - SERVICE_8500_CHECK_TCP=true
    - SERVICE_8500_CHECK_INITIAL_STATUS=passing
    - SERVICE_8500_TAGS=${CONSUL_SERVICE_8500_TAGS}
    - SERVICE_8600_IGNORE=true
    network_mode: host
    restart: always
    volumes:
    - consul:/consul/data
  fabio:
    image: fabiolb/fabio:latest
    command: -registry.backend "consul" -registry.consul.addr "consul:8500" -proxy.addr ":80,:443;cs=local" -proxy.cs "cs=local;type=file;cert=/certs/${SSL_HOSTNAME}.crt;key=/certs/${SSL_HOSTNAME}.key"
    depends_on:
    - consul
    extra_hosts:
    - consul:${DOCKER_HOST_INET}
    hostname: ${HOSTNAME}
    labels:
    - SERVICE_80_NAME=${COMPOSE_SERVICE_NAME}-fabio-80
    - SERVICE_80_CHECK_TCP=true
    - SERVICE_80_CHECK_INITIAL_STATUS=passing
    - SERVICE_443_NAME=${COMPOSE_SERVICE_NAME}-fabio-443
    - SERVICE_443_CHECK_TCP=true
    - SERVICE_443_CHECK_INITIAL_STATUS=passing
    - SERVICE_9998_NAME=${COMPOSE_SERVICE_NAME}-fabio-9998
    - SERVICE_9998_CHECK_TCP=true
    - SERVICE_9998_CHECK_INITIAL_STATUS=passing
    - SERVICE_9998_TAGS=${FABIO_SERVICE_9998_TAGS}
    - SERVICE_9999_IGNORE=true
    ports:
    - 80:80
    - 443:443
    - 9998
    networks:
    - public
    restart: always
    volumes:
      - ssl-certs:/certs
  portainer:
    image: portainer/portainer
    labels:
    - SERVICE_8000_IGNORE=true
    - SERVICE_9000_NAME=${COMPOSE_SERVICE_NAME}-portainer-9000
    - SERVICE_9000_CHECK_TCP=true
    - SERVICE_9000_CHECK_INITIAL_STATUS=passing
    - SERVICE_9000_TAGS=${PORTAINER_SERVICE_9000_TAGS}
    networks:
    - public
    ports:
    - 8000
    - 9000
    restart: always
    volumes:
    - /var/run/docker.sock:/var/run/docker.sock
    - portainer:/data
  registrator:
    build:
      context: .
      dockerfile: docker/registrator/Dockerfile
    command: -internal -cleanup -deregister always -resync=30 -useIpFromNetwork node consul://consul:8500
    depends_on:
    - consul
    extra_hosts:
    - consul:${DOCKER_HOST_INET}
    hostname: ${HOSTNAME}
    image: node/infra/registrator
    network_mode: host
    restart: always
    volumes:
    - /var/run/docker.sock:/tmp/docker.sock

volumes:
  consul:
  portainer:
  ssl-certs:

networks:
  public:
    external: true
    name: node
